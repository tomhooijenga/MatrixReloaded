"""
Django settings for skill_matrix project.

Generated by 'django-admin startproject' using Django 1.8.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'j+f-)=ch=9n%a-x(y0dfq%^j2-8jem8sw+$4-tid%2^z#df$8f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Our apps
    'rest_framework',
    'api',
    'frontend',
    'backend'
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'skillmatrix.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages'
            ],
        },
    },
]

WSGI_APPLICATION = 'skillmatrix.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'HOST': 'localhost',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),  # THIS MUST CHANGE ON DEPLOYMENT
        'USER': 'root',  # THIS MUST CHANGE ON DEPLOYMENT
        'PASSWORD': 'asdf',  # THIS MUST CHANGE ON DEPLOYMENT,
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = False

USE_L10N = False

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

# app files go in (app)/static
STATIC_URL = '/static/'

# Add site wide static files like bootstrap
STATICFILES_DIRS = (
    # Project assets
    os.path.join(BASE_DIR, 'static'),
)

# Media files (user-uploaded)
# The path where the user-uploaded files will be stored
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# The url where the user-uploaded files will be served
MEDIA_URL = '/media/'

# Rest framework settings
REST_FRAMEWORK = {
    'PAGE_SIZE': False,
    # A request needs to be at least logged in. Extra required permissions are
    # defined in the Views
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',),
    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework.authentication.SessionAuthentication',)
}

# Override the default User model with our own
AUTH_USER_MODEL = 'api.User'

LOGIN_URL = '/admin/login/'

# When there's no next url to go to, send them to the engineers part
LOGIN_REDIRECT_URL = '/admin/engineers'

LOGOUT_URL = '/admin/logout'

LOGGING = {
    'disable_existing_loggers': True,
    'version': 1,
    'handlers': {
        'console': {
            # logging handler that outputs log messages to terminal
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',  # message level to be written to console
        },
    },
    'loggers': {
        'django.db': {
            # django also has database level logging
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}
